# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Cluster {
  cluster_id: ID!
  project_id: ID!
  cluster_name: String!
  description: String
  platform_name: String!
  access_key: String!
  is_registered: Boolean!
  is_cluster_confirmed: Boolean!
  is_active: Boolean!
  updated_at: String!
  created_at: String!
  cluster_type: String!
}

input ClusterInput{
  cluster_name: String!
  description: String
  platform_name: String!
  project_id: ID!
  cluster_type: String!
}

type ClusterEvent {
  event_id: ID!
  event_type: String!
  event_name: String!
  description: String!
  cluster: Cluster!
}

type ClusterAction {
    project_id: ID!
    action: String!
}

input ClusterActionInput {
    cluster_id: ID!
    action:String!
}

input ClusterEventInput{
  event_name: String!
  description: String!
  cluster_id: String!
  access_key: String!
}

input ClusterIdentity{
  cluster_id: String!
  access_key: String!
}

type ClusterConfirmResponse {
    isClusterConfirmed: Boolean!
    newClusterKey: String
    cluster_id: String
}

input chaosWorkFlowInput {
  workflow_yaml: String!
  cronSyntax: String!
  Workflow_name: String!
  Workflow_description: String!
  Weightages: [weightagesInput]!
  isCustomWorkflow: Boolean!
}

input weightagesInput {
  experiment_name: String!
  weightage: Int!
}

type weightages {
  experiment_name: String!
  weightage: Int!
}

type chaosWorkFlowResponse {
  workflow_id: String!
  cronSyntax: String!
  Workflow_name: String!
  Workflow_description: String!
  Weightages: [weightages]!
  isCustomWorkflow: Boolean!
}

type WorkflowRun{
   workflow_run_id: ID!
   workflow_id: ID!
   cluster_name: String!
   last_updated: String!
   project_id: ID!
   cluster_id: ID!
   workflow_name: String!
   execution_data: String!
}

input WorkflowRunInput{
   workflow_run_id: ID!
   workflow_name: String!
   execution_data: String!
   cluster_id: ClusterIdentity!
}

type PodLogResponse{
   workflow_run_id: ID!
   pod_name: String!
   pod_type: String!
   log: String!
}

input PodLog{
   cluster_id: ClusterIdentity!
   request_id: ID!
   workflow_run_id: ID!
   pod_name: String!
   pod_type: String!
   log: String!
}

input PodLogRequest{
   cluster_id: ID!
   workflow_run_id: ID!
   pod_name: String!
   pod_namespace: String!
   pod_type: String!
   exp_pod: String
   runner_pod: String
   chaos_namespace: String
}

type Query{
    getWorkFlowRuns(project_id: String!): [WorkflowRun!]!
}

type Mutation{
    #It is used to create external cluster.
    userClusterReg(clusterInput: ClusterInput!): String!

    #It is used to confirm the subscriber registration
    clusterConfirm(identity: ClusterIdentity!): ClusterConfirmResponse!

    #It is used to send cluster related events from the subscriber
    newClusterEvent(clusterEvent: ClusterEventInput!): String!

    #It is used to create chaosworkflow
    createChaosWorkFlow(input: chaosWorkFlowInput): chaosWorkFlowResponse!

    chaosWorkflowRun(workflowData: WorkflowRunInput!): String!

    podLog(log: PodLog!): String!
}

type Subscription{
    #It is used to listen cluster events from the graphql server
    clusterEventListener(project_id: String!): ClusterEvent!

    #It is used to listen cluster operation request from the graphql server
    clusterConnect(clusterInfo: ClusterIdentity!): ClusterAction!

    workflowEventListener(project_id: String!): WorkflowRun!

    getPodLog(podDetails: PodLogRequest!): PodLogResponse!
}
